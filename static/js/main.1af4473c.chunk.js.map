{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","class","role","name","onClick","toggleMode","value","defaultChecked","htmlFor","TextForm","useState","text","setText","btnColor","style","color","heading","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","find","replace","RegExp","document","getElementById","select","navigator","clipboard","writeText","split","join","length","trim","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","currentMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1af4473c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                                <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div>\r\n\r\n                        <ul className=\"navbar-nav mx-4\">\r\n                            <li class=\"nav-item dropdown\">\r\n                                <a class=\"nav-link active dropdown-toggle\" href=\"#navbarDropdown\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                                    Change Mode\r\n                                </a>\r\n                                <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                                    <li>\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input mx-1\" type=\"radio\" name=\"mode\" onClick={props.toggleMode} id=\"lightMode\" value=\"light\" defaultChecked />\r\n                                            <label className=\"form-check-label\" htmlFor=\"lightMode\">\r\n                                                Light Mode\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                    <li><hr class=\"dropdown-divider\" /></li>\r\n                                    <li>\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input mx-1\" type=\"radio\" name=\"mode\" onClick={props.toggleMode} id=\"darkMode\" value=\"dark\" />\r\n                                            <label className=\"form-check-label\" htmlFor=\"darkMode\">\r\n                                                Dark Mode\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                    <li>\r\n                                        <div className=\"form-check\">\r\n                                            <input className=\"form-check-input mx-1\" type=\"radio\" name=\"mode\" onClick={props.toggleMode} id=\"greenMode\" value=\"green\" />\r\n                                            <label className=\"form-check-label\" htmlFor=\"greenMode\">\r\n                                                Green Mode\r\n                                            </label>\r\n                                        </div>\r\n                                    </li>\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n                        </div>\r\n                        {/* <div className={`form-check text-${props.mode === 'dark' ? 'light' : 'dark'}`}> \r\n                            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const replaceAll = (original, find, replace) => {\r\n        return original.replace(new RegExp(find, \"gi\"), replace);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    \r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n    \r\n    const handleClearTextClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n    \r\n    const handleRemoveWhiteSpacesClick = () => {\r\n        let newText = replaceAll(text, \" \", \"\");\r\n        setText(newText);\r\n        props.showAlert(\"All white spaces removed!\", \"success\");\r\n    }\r\n    \r\n    const handleCopy = () => {\r\n        let newText = document.getElementById('myBox');\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    \r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"onChange clicked\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    let btnColor = 'primary';\r\n    if (props.mode === 'green') {\r\n        btnColor = 'success';\r\n    } \r\n\r\n    const getTextAreaBgColor = (mode) => {\r\n        if (mode === 'dark') {\r\n            return 'grey';\r\n        } else if (mode === 'green') {\r\n            return '#0b5b27';\r\n        } else {\r\n            return 'white';\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'light' ? '#042743'  : 'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: getTextAreaBgColor(props.mode), color: props.mode === 'light' ? '#042743'  : 'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className={`btn btn-${btnColor} mx-1`} onClick={handleUpClick} >Conver to Uppercase</button>\r\n            <button className={`btn btn-${btnColor} mx-1`} onClick={handleLoClick} >Conver to Lowercase</button>\r\n            <button className={`btn btn-${btnColor} mx-1`} onClick={handleClearTextClick} >Clear Text</button>\r\n            <button className={`btn btn-${btnColor} mx-1`} onClick={handleRemoveWhiteSpacesClick} >Remove White Spaces</button>\r\n            <button className={`btn btn-${btnColor} mx-1`} onClick={handleCopy} >Copy Text</button>\r\n            <button className={`btn btn-${btnColor} mx-1`} onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'light' ? '#042743'  : 'white'}}>\r\n            <h2>You text summary</h2>\r\n            <p>{text.length > 0 ? text.trim().split(\" \").length : 0} words {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n            <h2>Preivew</h2>\r\n            <p>{text.length > 0 ? text : 'Enter something in the text box above to preview it here'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Wheather dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = (event) => {\n    // if (mode === 'light') {\n    //   setMode('dark');\n    //   document.body.style.backgroundColor = '#042743';\n    //   showAlert(\"Dark mode has been enabled\", \"success\");\n    // }\n    // else {\n    //   setMode('light');\n    //   document.body.style.backgroundColor = 'white';\n    //   showAlert(\"Light mode has been enabled\", \"success\");\n    // }\n    setMode(event.target.value);\n    let currentMode = event.target.value;\n    showAlert(`${currentMode} mode has been enabled`, \"success\");\n    if (currentMode === 'light') {\n      document.body.style.backgroundColor = 'white';\n      document.title = 'TextUtils - Light Mode'\n    }\n    else if (currentMode === 'dark') {\n      document.body.style.backgroundColor = '#042743';\n      document.title = 'TextUtils - Dark Mode'\n    }\n    else {\n      document.body.style.backgroundColor = '#19a319'\n      document.title = 'TextUtils - Green Mode'\n    }\n\n    // setInterval(() => {\n    //   document.title = 'TextUtils is Amazing';\n    // }, 2000);\n\n    // setInterval(() => {\n    //   document.title = 'Install TextUtils Now';\n    // }, 1500);\n  }\n\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About Text\" /> */}\n      {/* <Navbar /> */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* /users --> Component 1\n            /users/home --> Component 2 */}\n            {/* <Route exact path=\"/about\"> */}\n              {/* <About /> */}\n            {/* </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n            {/* </Route> */}\n          {/* </Switch> */}\n          {/* <About/> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}